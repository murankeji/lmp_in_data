# This is a simple example showing how to build a long polymer
# (in this case, an alkane chain).  I split the
# hexadecane molecule into individual CH2 and CH3 monomers.
# I defined it this way so that you can easily modify 
# it to change the length of the alkane chain.


import "ch2group.lt"  # load the definition of the "CH2" object
import "ch3group.lt"  # load the definition of the "CH3" object



Alkane16 inherits OPLSAA {


  create_var {$mol}  # optional:force all monomers to share the same molecule-ID

  # This is a long polymer consisting of 48 CH2 groups and 2 CH3 end-caps.
  # Rather than create them one-by-one, I decided to create them all
  # using a single "new" command.  Later, I can modify this array.

  # Create an array of 50 "CH2" objects distributed along the X axis

  monomers = new CH2 [16].rot(180,1,0,0).move(1.2533223,0,0)

  # NOTE: the ".rot(180,1,0,0).move(1.2533223,0,0)" means that each
  # successive monomer is rotated 180 degrees (with respect to the previous
  # monomer), and then moved 1.2533223 Angstroms down the X axis.
  # Alternately, if you are reading the coordinates from a file, you don't have
  # to indicate the position & orientation of each monomer.  In that case, use:
  # monomers = new CH2 [50]


  # ---- Now, modify the ends: ---
  # Delete the CH2 groups at the beginning and end, and replace them with CH3.

  delete monomers[0]
  delete monomers[15]

  monomers[0] = new CH3
  monomers[15] = new CH3

  # Move the CH3 groups to the correct location at either end of the chain:

  #monomers[0].move(0,0,0)   # <--(this monomer is already in the correct place)
  monomers[15].rot(180.0,0,0,1).move(18.7998345,0,0)    #61.4127927=49*1.2533223


  ## NOTE: Alternately, you can define the polymer without deleting the ends:
  # monomers[0] = new CH3
  # monomers[1-48] = new CH2[48].rot(180,1,0,0).move(1.2533223,0,0)
  ##  Note: monomers[0] and monomers[1] overlap, so we move 1-48 to make room:
  # monomers[1-48].rot(180,1,0,0).move(1.2533223,0,0)  # move many monomers
  ##  Now add the final monomer at the end:
  # monomers[49] = new CH3.rot(180.0,0,0,1).move(61.4127927,0,0)
  #
  ## NOTE: Alternately, you can read the coordinates from a file.
  ##       In that case, you can use simpler commands:
  # monomers[0] = new CH3
  # monomers[1-48] = new CH2[48]
  # monomers[49] = new CH3



  # Now add a list of bonds connecting the carbon atoms together:
  # (Angles, dihedrals, impropers will be automatically added later.)

  write('Data Bond List') {
    $bond:b1  $atom:monomers[0]/c $atom:monomers[1]/c
    $bond:b2  $atom:monomers[1]/c $atom:monomers[2]/c
    $bond:b3  $atom:monomers[2]/c $atom:monomers[3]/c
    $bond:b4  $atom:monomers[3]/c $atom:monomers[4]/c
    $bond:b5  $atom:monomers[4]/c $atom:monomers[5]/c
    $bond:b6  $atom:monomers[5]/c $atom:monomers[6]/c
    $bond:b7  $atom:monomers[6]/c $atom:monomers[7]/c
    $bond:b8  $atom:monomers[7]/c $atom:monomers[8]/c
    $bond:b9   $atom:monomers[8]/c $atom:monomers[9]/c
    $bond:b10  $atom:monomers[9]/c $atom:monomers[10]/c
    $bond:b11  $atom:monomers[10]/c $atom:monomers[11]/c
    $bond:b12  $atom:monomers[11]/c $atom:monomers[12]/c
    $bond:b13  $atom:monomers[12]/c $atom:monomers[13]/c
    $bond:b14  $atom:monomers[13]/c $atom:monomers[14]/c
    $bond:b15  $atom:monomers[14]/c $atom:monomers[15]/c
  }

} # Alkane50








######### (scratchwork calculations for the atomic coordinates) #########
# Lcc = 1.5350 # length of the C-C bond (Sp3)
# Lch = 1.0930 # length of the C-H bond
# theta=2*atan(sqrt(2)) # ~= 109.5 degrees = tetrahedronal angle (C-C-C angle)
# DeltaXc = Lcc*sin(theta/2)  # = 1.2533222517240594
# DeltaYc = Lcc*cos(theta/2)  # = 0.8862326632060754
#                             # 0.5*DeltaYc = 0.4431163316030377
# DeltaZh = Lch*sin(theta/2)  # = 0.8924307629540046
# DeltaYh = Lch*cos(theta/2)  # = 0.6310438442242609
